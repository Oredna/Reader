@page "{handler?}"
@using Microsoft.AspNetCore.Antiforgery;
@model Reader.Pages.ReadModel
@inject IAntiforgery antiforgery
@{
    ViewData["Title"] = Model.PageTitle;
}

@if (!Model.Items.Any())
{
    <p>You have no read items</p>
}
else
{
    <ul>
        @foreach (var item in Model.Items)
        {
            <li id="item_@item.Id">
                @item.Published @item.FeedTitle @if (item.SourceHost != null)
                {@item.SourceHost} <a href="@item.Uri" rel="noreferrer" target="_blank">@item.Title</a><button onclick="markAsUnread(@item.Id)">Mark as unread</button>
            </li>
        }
    </ul>
}

<script>
    async function markAsUnread(id) {
        const itemElement = document.getElementById(`item_${id}`);
        itemElement.remove();

        await fetch(`/Read/MarkAsUnread?id=${id}`, {
            method: 'POST', headers: { 'RequestVerificationToken': '@antiforgery.GetAndStoreTokens(HttpContext).RequestToken' }
        });

        // Reload the page if there are no items left
        if (document.querySelectorAll('[id^=item_]').length === 0) {
            location.href = '/Read';
        }
    }
</script>