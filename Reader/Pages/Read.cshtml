@page "{handler?}"
@using Microsoft.AspNetCore.Antiforgery;
@model Reader.Pages.ReadModel
@inject IAntiforgery antiforgery
@{
    ViewData["Title"] = Model.PageTitle;
}
<article>
    @if (!Model.Items.Any())
    {
        <h1>You have no read items</h1>
    }
    else
    {
        <h1>Read</h1>
        @foreach (var itemsForDay in Model.Items)
        {
            <h2 class="items-date">@itemsForDay.Key</h2>
            <ul class="item-list">
                @foreach (var item in itemsForDay)
                {
                    <li id="item_@item.Id" class="item">
                        <div class="item-header">
                            <a href="@item.Uri" rel="noreferrer" target="_blank">@item.Title</a>
                            <span class="item-meta">
                                @item.FeedTitle
                                @if (item.SourceHost != null)
                                {
                                    @item.SourceHost
                                }
                                <time>@item.Age</time>
                            </span>
                        </div>
                        <button class="item-unread-button" onclick="markAsUnread(@item.Id)"></button>
                    </li>
                }
            </ul>
        }
    }
</article>

<script>
    async function markAsUnread(id) {
        const itemElement = document.getElementById(`item_${id}`);
        itemElement.remove();

        await fetch(`/Read/MarkAsUnread?id=${id}`, {
            method: 'POST', headers: { 'RequestVerificationToken': '@antiforgery.GetAndStoreTokens(HttpContext).RequestToken' }
        });

        // Reload the page if there are no items left
        if (document.querySelectorAll('[id^=item_]').length === 0) {
            location.href = '/Read';
        }
    }
</script>
